<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[JavaScript Monkey]]></title>
  <subtitle><![CDATA[Rants about Node.js, AngularJS and related matters]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://izeau.github.io/"/>
  <updated>2015-10-12T20:40:50.000Z</updated>
  <id>https://izeau.github.io/</id>
  
  <author>
    <name><![CDATA[Jean Dupouy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Elegantly dispose of your AngularJS listeners!]]></title>
    <link href="https://izeau.github.io/2015/10/12/elegantly-dispose-of-your-angularjs-listeners/"/>
    <id>https://izeau.github.io/2015/10/12/elegantly-dispose-of-your-angularjs-listeners/</id>
    <published>2015-10-12T19:25:47.000Z</published>
    <updated>2015-10-12T20:40:50.000Z</updated>
    <content type="html"><![CDATA[<p>If you have used AngularJS, you probably have at least once used the <code>Scope.$on</code> or <code>Scope.$watch</code> methods, and probably had to dispose of listeners / watchers. Here’s a little trick you may like to do just that in a few lines.</p>
<a id="more"></a>
<h1 id="Deregistration_functions_are_awkward">Deregistration functions are awkward</h1><p>AngularJS’s <code>Scope.$on</code> and <code>Scope.$watch</code> methods return a deregistration function which should be called when you don’t need the callback anymore (e.g. if you were listening on <code>$rootScope</code> from a controller), mainly for performance reasons. Not disposing of listeners will keep the garbage collector from doing its job. For instance, if the <code>fooListener</code> below was to use a variable (say <code>counter</code>) from a higher context, it wouldn’t be freed from memory. This can lead to a large consumption of RAM, and is especially something to watch for in Single-Page Applications and mobile apps.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// These will only be freed when the $rootScope gets destroyed, likely</span></span><br><span class="line"><span class="comment">// when you close the tab / reload the page. They will keep piling up if</span></span><br><span class="line"><span class="comment">// your controller is created multiple times, and are a common cause of</span></span><br><span class="line"><span class="comment">// memory leaks.</span></span><br><span class="line"><span class="keyword">var</span> deregisterFooListener = $rootScope.$on(<span class="string">'myFooEvent'</span>, fooListener);</span><br><span class="line"><span class="keyword">var</span> deregisterBarListener = $rootScope.$on(<span class="string">'myBarEvent'</span>, barListener);</span><br><span class="line"><span class="keyword">var</span> deregisterBazListener = $rootScope.$on(<span class="string">'myBazEvent'</span>, bazListener);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This one will be automatically freed when the $scope gets destroyed.</span></span><br><span class="line">$scope.$on(<span class="string">'$destroy'</span>, deregister);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This variable would be leaking if we didn’t call the deregistration</span></span><br><span class="line"><span class="comment">// function because it is used in the fooListener.</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A dummy listener for the example’s sake</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fooListener</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Increment the counter</span></span><br><span class="line">  counter = counter + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deregister</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// The scope’s about to be destroyed, we don’t need the listeners anymore.</span></span><br><span class="line">  deregisterFooListener();</span><br><span class="line">  deregisterBarListener();</span><br><span class="line">  deregisterBazListener();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Use_an_array!">Use an array!</h1><p>This is OK when you only have one or two listeners to care for, but gets messier the more you have. My humble tip: use an array of deregistration functions which you can loop on and call one by one.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listeners = [</span><br><span class="line">  $rootScope.$on(<span class="string">'myFooEvent'</span>, fooListener),</span><br><span class="line">  $rootScope.$on(<span class="string">'myBarEvent'</span>, barListener),</span><br><span class="line">  $rootScope.$on(<span class="string">'myBazEvent'</span>, bazListener)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$scope.$on(<span class="string">'$destroy'</span>, deregister);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deregister</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (listeners.length) &#123;</span><br><span class="line">    <span class="comment">// Mind the double parens! We pop one deregistration function at a time</span></span><br><span class="line">    <span class="comment">// and call it immediately.</span></span><br><span class="line">    listeners.pop()();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>That way you won’t pollute the local scope and you won’t have to come up with awkward variable names such as <code>deregisterStateChangeSuccessListener</code>.</p>
<h1 id="Deregistration_as_a_Service">Deregistration as a Service</h1><p>You don’t want to repeat yourself and copy-paste this <code>deregister</code> function all around the codebase, do you? Enter the <code>deregister</code> service.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app.utils'</span>)</span><br><span class="line">  .value(<span class="string">'deregister'</span>, deregister);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deregister</span> (<span class="params">listeners</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">deregisterCallback</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Feel free to loop however you want, I like this one for brevity</span></span><br><span class="line">    <span class="keyword">while</span> (listeners.length) &#123;</span><br><span class="line">      listeners.pop()();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And then you can simply use it like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inject the deregister service</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyController</span> (<span class="params">$scope, deregister</span>) </span>&#123;</span><br><span class="line">  $scope.$on(<span class="string">'$destroy'</span>, deregister([</span><br><span class="line">    $rootScope.$on(<span class="string">'myFooEvent'</span>, fooListener),</span><br><span class="line">    $rootScope.$on(<span class="string">'myBarEvent'</span>, barListener),</span><br><span class="line">    $rootScope.$on(<span class="string">'myBazEvent'</span>, bazListener)</span><br><span class="line">  ]));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// or, if it’s more your style:</span></span><br><span class="line">  <span class="keyword">var</span> deregisterEverything = deregister([</span><br><span class="line">    $rootScope.$on(<span class="string">'myFooEvent'</span>, fooListener),</span><br><span class="line">    $rootScope.$on(<span class="string">'myBarEvent'</span>, barListener),</span><br><span class="line">    $rootScope.$on(<span class="string">'myBazEvent'</span>, bazListener)</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  $scope.$on(<span class="string">'$destroy'</span>, deregisterEverything);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Much cleaner, isn’t it?</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you have used AngularJS, you probably have at least once used the <code>Scope.$on</code> or <code>Scope.$watch</code> methods, and probably had to dispose of listeners / watchers. Here’s a little trick you may like to do just that in a few lines.</p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="https://izeau.github.io/tags/angularjs/"/>
    
      <category term="Code Style" scheme="https://izeau.github.io/tags/code-style/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Organize your UI Router states The Right Way™]]></title>
    <link href="https://izeau.github.io/2015/10/11/organize-your-ui-router-states-the-right-way/"/>
    <id>https://izeau.github.io/2015/10/11/organize-your-ui-router-states-the-right-way/</id>
    <published>2015-10-11T16:18:33.000Z</published>
    <updated>2015-10-11T18:36:06.000Z</updated>
    <content type="html"><![CDATA[<p>In this article, we review the traditional approach to UI Router states organization, and an opiniated alternative using AngularJS constants.</p>
<a id="more"></a>
<h1 id="Hello,_UI_Router!">Hello, UI Router!</h1><p><a href="http://angular-ui.github.io/ui-router/" target="_blank" rel="external">UI Router</a> is a very well known AngularJS module. It is used by Ionic instead of <a href="https://docs.angularjs.org/api/ngRoute" target="_blank" rel="external">AngularJS’ router</a> by default, but you can (and should probably try to) use it for your Single-Page Applications.</p>
<p>Instead of routing by URL, you organize your controllers by state. States can be nested and share local services known as “resolves”. By the way, states can have multiple views (e.g. your root state <code>app</code> would have a <code>menu</code> and a <code>content</code> view).</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+-------------- app --------------+&#10;| +- menu -+  +---- content ----+ |&#10;| |        |  |                 | |&#10;| |        |  |                 | |&#10;| |        |  |                 | |&#10;| +--------+  +-----------------+ |&#10;+---------------------------------+</span><br></pre></td></tr></table></figure>
<p>Traditionally, we would declare this state as such:</p>
<figure class="highlight js"><figcaption><span>config/routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app.config'</span>)</span><br><span class="line">  .config(routes);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routes</span> (<span class="params">$stateProvider</span>) </span>&#123;</span><br><span class="line">  $stateProvider</span><br><span class="line">    .state(<span class="string">'app'</span>, &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      templateUrl: <span class="string">'/templates/app.html'</span>,</span><br><span class="line">      controller: <span class="string">'AppController as app'</span>,</span><br><span class="line">      abstract: <span class="literal">true</span>,</span><br><span class="line">      resolve: &#123;</span><br><span class="line">        user: <span class="string">'CurrentUser'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>controllers/app/app.controller.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app.controllers'</span>)</span><br><span class="line">  .controller(<span class="string">'AppController'</span>, AppController);</span><br><span class="line"></span><br><span class="line"><span class="comment">// `user` is the resolved `CurrentUser` service</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AppController</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><figcaption><span>templates/app.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">aside</span> <span class="attribute">class</span>=<span class="value">"menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"menu--greetings"</span>&gt;</span></span><br><span class="line">      Hello, &#123;&#123; app.user.fullname &#125;&#125;!</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- a menu that's customisable by a child state --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ui-view</span> <span class="attribute">name</span>=<span class="value">"menu"</span>&gt;</span><span class="tag">&lt;/<span class="title">ui-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- main content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">main</span></span><br><span class="line">    <span class="attribute">class</span>=<span class="value">"content"</span></span><br><span class="line">    <span class="attribute">ui-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Note that we don’t name the <code>content</code> view intentionally. This is so that we can refer to it in child states without having to specify a view object:</p>
<figure class="highlight js"><figcaption><span>config/routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app.config'</span>)</span><br><span class="line">  .config(routes);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routes</span> (<span class="params">$stateProvider</span>) </span>&#123;</span><br><span class="line">  $stateProvider</span><br><span class="line">    .state(<span class="string">'app'</span>, &#123;</span><br><span class="line">      url: <span class="string">''</span>,</span><br><span class="line">      templateUrl: <span class="string">'/templates/app.html'</span>,</span><br><span class="line">      controller: <span class="string">'AppController as app'</span>,</span><br><span class="line">      abstract: <span class="literal">true</span>,</span><br><span class="line">      resolve: &#123;</span><br><span class="line">        user: <span class="string">'CurrentUser'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .state(<span class="string">'app.profile'</span>, &#123;</span><br><span class="line">      url: <span class="string">'/profile'</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// since the content view is unnamed, we can do this:</span></span><br><span class="line">      templateUrl: <span class="string">'/templates/profile.html'</span>,</span><br><span class="line">      controller: <span class="string">'ProfileController as profile'</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// instead of this:</span></span><br><span class="line">      views: &#123;</span><br><span class="line">        content: &#123;</span><br><span class="line">          templateUrl: <span class="string">'/templates/profile.html'</span>,</span><br><span class="line">          controller: <span class="string">'ProfileController as profile'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Feeling_bloated?">Feeling bloated?</h1><p>Of course, the more your application grows, the more your <code>routes</code> function grows. Moreover, by declaring states like this, we kind of ruin the modularization: we’re puttin’ somewhat-but-not-always related code in one place, and at the same time resolves are not easily visible in the middle of this mess.</p>
<p>Instead of shoving my states in a config block, I’d rather have them sitting with their controller, and injected into the config function so that we can improve readibility:</p>
<figure class="highlight js"><figcaption><span>config/routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app.config'</span>)</span><br><span class="line">  .config(routes);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routes</span> (<span class="params">$stateProvider, AppState, ProfileState</span>) </span>&#123;</span><br><span class="line">  $stateProvider</span><br><span class="line">    .state(<span class="string">'app'</span>, AppState)</span><br><span class="line">    .state(<span class="string">'app.profile'</span>, ProfileState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Turns out there’s only two types of AngularJS objects that are injectable to a config block: service providers and constants. Guess how we’re going to declare our states?</p>
<figure class="highlight js"><figcaption><span>states/app/app.state.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app.states'</span>)</span><br><span class="line">  .controller(<span class="string">'AppController'</span>, AppController)</span><br><span class="line">  .constant(<span class="string">'AppState'</span>, &#123;</span><br><span class="line">    url: <span class="string">''</span>,</span><br><span class="line">    templateUrl: <span class="string">'/templates/app.html'</span>,</span><br><span class="line">    controller: <span class="string">'AppController as app'</span>,</span><br><span class="line">    abstract: <span class="literal">true</span>,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      user: <span class="string">'CurrentUser'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AppController</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This way, we can keep our state object right there with its controller and keep routing configuration in another file. It also allows us to see every declared state at a glance rather than having to <code>grep \.state config/routes.js</code>.</p>
<h1 id="Sidenotes">Sidenotes</h1><h2 id="Using_$injector">Using <code>$injector</code></h2><p>AngularJS’ Dependency Injection system gets quite verbose, and nobody wants to maintain a 6+ arguments function. Luckily for us, the <a href="https://docs.angularjs.org/api/auto/service/$injector" target="_blank" rel="external"><code>$injector</code></a> service can be used to inject dependencies on the fly. So we can rewrite our config file:</p>
<figure class="highlight js"><figcaption><span>config/routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app.config'</span>)</span><br><span class="line">  .config(routes);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routes</span> (<span class="params">$stateProvider, $injector</span>) </span>&#123;</span><br><span class="line">  $stateProvider</span><br><span class="line">    .state(<span class="string">'app'</span>, $injector.get(<span class="string">'AppState'</span>))</span><br><span class="line">    .state(<span class="string">'app.profile'</span>, $injector.get(<span class="string">'ProfileState'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article, we review the traditional approach to UI Router states organization, and an opiniated alternative using AngularJS constants.</p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="https://izeau.github.io/tags/angularjs/"/>
    
      <category term="UI Router" scheme="https://izeau.github.io/tags/ui-router/"/>
    
  </entry>
  
</feed>
